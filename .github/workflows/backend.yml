name: Backend CI+CD (Django + SQLite)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: backend-${{ github.ref }}
  cancel-in-progress: false

jobs:
  test:
    name: CI (migrate & test)
    runs-on: ubuntu-latest
    env:
      BACKEND_DIR: "backend"
      DJANGO_SETTINGS_MODULE: config.settings
      DEBUG: "True"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles(format('{0}/requirements.txt', env.BACKEND_DIR)) }}

      - name: Install dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install gunicorn  # optional if you use it in Docker

      - name: Run migrations
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          python manage.py migrate --noinput

      - name: Run Django tests
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          python manage.py test --noinput


  build_and_deploy:
    name: Build, Push to ECR & Deploy to ECS
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest ./backend

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Download ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} > task-def.json

      - name: Update task definition image
        run: |
          export IMAGE_URI=${{ secrets.ECR_REPOSITORY }}:latest
          jq '.taskDefinition.containerDefinitions[0].image = env.IMAGE_URI' task-def.json > new-task-def.json

      - name: Register new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://new-task-def.json


      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --force-new-deployment


      - name: Run Django migrations and seed data in ECS
        run: |
          # Find the running task/container for the service
          TASK_ARN=$(aws ecs list-tasks --cluster ${{ secrets.ECS_CLUSTER }} --service-name ${{ secrets.ECS_SERVICE }} --desired-status RUNNING --query 'taskArns[0]' --output text)
          CONTAINER_NAME=$(aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} --query 'taskDefinition.containerDefinitions[0].name' --output text)
          aws ecs execute-command \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --task "$TASK_ARN" \
            --container "$CONTAINER_NAME" \
            --interactive \
            --command "python manage.py migrate --noinput"
          aws ecs execute-command \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --task "$TASK_ARN" \
            --container "$CONTAINER_NAME" \
            --interactive \
            --command "python manage.py seed_users"
          aws ecs execute-command \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --task "$TASK_ARN" \
            --container "$CONTAINER_NAME" \
            --interactive \
            --command "python manage.py seed_items"


            docker compose -f /opt/stack/production/docker-compose.yml up -d backend

            # Run migrations in the deployed container
            CONTAINER_ID=$(docker compose -f /opt/stack/production/docker-compose.yml ps -q backend)
            docker exec "$CONTAINER_ID" python manage.py migrate --noinput

            # Optional: collect static files
            # docker exec "$CONTAINER_ID" python manage.py collectstatic --noinput

            docker image prune -f
